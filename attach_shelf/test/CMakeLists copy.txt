cmake_minimum_required(VERSION 3.8)
project(attach_shelf)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(std_msgs REQUIRED)
find_package(tf2_eigen REQUIRED)
# for service message(srv)
find_package(rosidl_default_generators REQUIRED)

# Include directories
include_directories(include)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

# Libraries
add_library(pre_approach src/pre_approach.cpp)
add_library(pre_approach_v2 src/pre_approach_v2.cpp)
add_library(approach_service_server src/approach_service_server.cpp)

install(TARGETS pre_approach pre_approach_v2 approach_service_server
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

# Link dependencies to libraries
ament_target_dependencies(pre_approach rclcpp geometry_msgs sensor_msgs nav_msgs)
ament_target_dependencies(pre_approach_v2 rclcpp sensor_msgs geometry_msgs std_msgs nav_msgs tf2 tf2_ros)
ament_target_dependencies(approach_service_server rclcpp sensor_msgs geometry_msgs std_msgs nav_msgs tf2 tf2_ros tf2_eigen)

# Generate interfaces for the .srv file
rosidl_generate_interfaces(${PROJECT_NAME} "srv/GoToLoading.srv" DEPENDENCIES std_msgs sensor_msgs geometry_msgs)
rosidl_get_typesupport_target(typesupport_target ${PROJECT_NAME} "rosidl_typesupport_cpp")
target_link_libraries(pre_approach_v2 ${typesupport_target})
target_link_libraries(approach_service_server ${typesupport_target})

# Executables
add_executable(pre_approach_node src/pre_approach_main.cpp)
add_executable(pre_approach_v2_node src/pre_approach_v2_main.cpp)
add_executable(approach_service_server_node src/approach_service_server_main.cpp)

# Link libraries to executables
target_link_libraries(pre_approach_node pre_approach)
target_link_libraries(pre_approach_v2_node pre_approach_v2)
target_link_libraries(approach_service_server_node approach_service_server)

# Install additional files
install(TARGETS pre_approach_node pre_approach_v2_node approach_service_server_node
  DESTINATION lib/${PROJECT_NAME}
)

# Install launch files.
install(DIRECTORY launch rviz
  DESTINATION share/${PROJECT_NAME}/
)

ament_package()